"""
Created on Thu Apr 25 16:54:26 2024

@author: AlexYu
"""
"""
Load txt documents from a specified directory, split them into smaller chunks based on certain criteria, 
and then save those chunks into a Chroma vector database using embeddings generated by OpenAI's models. 
"""
import os
import shutil
import time
from langchain.document_loaders import DirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores.chroma import Chroma

CHROMA_PATH = "chroma"
DATA_PATH = r"your file path that stores the txt files for Retrieval"

def main():
    generate_data_store()

def generate_data_store():
    documents = load_documents()
    chunks = split_text(documents)
    save_to_chroma(chunks)

def load_documents():
    loader = DirectoryLoader(DATA_PATH, glob="*.txt")
    documents = loader.load()
    return documents

def split_text(documents: list[Document]):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=300,
        chunk_overlap=100,
        length_function=len,
        add_start_index=True,
    )
    chunks = text_splitter.split_documents(documents)
    print(f"Split {len(documents)} documents into {len(chunks)} chunks.")

    document = chunks[10]
    print(document.page_content)
    print(document.metadata)

    return chunks

def safe_remove(path):
    """Attempt to remove a path with retries."""
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            shutil.rmtree(path)
            print(f"Successfully removed {path}")
            break
        except PermissionError as e:
            print(f"Attempt {attempt + 1} failed: {e}")
            time.sleep(1)  # Wait a bit for the file to be released
        if attempt == max_attempts - 1:
            print(f"Failed to remove {path} after {max_attempts} attempts.")

def save_to_chroma(chunks: list[Document]):
    # Clear out the database first.
    safe_remove(CHROMA_PATH)

    # Create a new DB from the documents.
    openai_key = "Your OpenAI API key"  # Replace this with your actual API key
    db = Chroma.from_documents(
        chunks, OpenAIEmbeddings(openai_api_key=openai_key), persist_directory=CHROMA_PATH
    )
    db.persist()
    print(f"Saved {len(chunks)} chunks to {CHROMA_PATH}.")

if __name__ == "__main__":
    main()
